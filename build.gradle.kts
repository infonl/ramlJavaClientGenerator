/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    // The Gradle Plugin for Publishing this plugin
    id("com.gradle.plugin-publish") version "0.10.1"


    // Apply the Kotlin JVM plugin to add support for Kotlin.
    kotlin("jvm") version "1.3.61"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url = uri("https://repo.gradle.org/gradle/libs-releases-local")
    }
    maven {
        url = uri("https://repository-master.mulesoft.org/nexus/content/repositories/releases")
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    // This is a gradle plugin
    implementation(gradleApi())
    // Depends on the Mule Soft Raml Code generator
    implementation("org.mule.raml.codegen:raml-client-generator-core:0.11")


    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

gradlePlugin {
    // Define the plugin
    val ramljavaclientgenerator by plugins.creating {
        id = "nl.info.gradle.plugin.RamlJavaClientGeneratorPlugin"
        implementationClass = "nl.info.gradle.plugin.RamlJavaClientGeneratorPlugin"
    }
}

pluginBundle {
    website = "https://github.com/infonl/ramlJavaClientGenerator"
    vcsUrl = "https://github.com/infonl/ramlJavaClientGenerator"
    tags = listOf("gradle", "raml", "java", "plugin", "codegen")
}

// Add a source set for the unit test suite
val unitTestSourceSet = sourceSets.maybeCreate("test")

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(unitTestSourceSet, functionalTestSourceSet)

configurations.getByName("functionalTestImplementation").extendsFrom(configurations.getByName("testImplementation"))

// Add a task to run the functional tests
val functionalTest by tasks.creating(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}
functionalTest.dependsOn("test")

val check by tasks.getting(Task::class) {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}
