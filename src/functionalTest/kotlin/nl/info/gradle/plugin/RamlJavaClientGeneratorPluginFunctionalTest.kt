/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package nl.info.gradle.plugin

import org.gradle.testkit.runner.GradleRunner
import java.io.File
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertTrue

/**
 * A simple functional test for the 'nl.info.gradle.plugin.greeting' plugin.
 */
class RamlJavaClientGeneratorPluginFunctionalTest {

    @BeforeTest fun `setup clean project dir`() {
        val projectDir = File("build/functionalTest")
        if (projectDir.exists()) {
            assert(projectDir.deleteRecursively())
        }
        projectDir.mkdirs()
        assert(projectDir.exists())

        projectDir.resolve("settings.gradle").writeText("")
    }

    @Test fun `can run task`() { // NOSONAR
        // Project dir is created during setup
        val projectDir = File("build/functionalTest")
        assert(projectDir.exists())

        // Setup the test build
        val ramlSourceFile = File("src/functionalTest/resources/simple_example.raml")
        assert(ramlSourceFile.exists())

        // Target dir that will be created
        val targetDir = File("build/functionalTest/target")

        projectDir.resolve("build.gradle").writeText("""
            plugins {
            	id('java')
                id('nl.info.gradle.plugin.RamlJavaClientGeneratorPlugin')
            }

            repositories {
                jcenter()
            }

            generateRamlJavaClient {
                source = "${ramlSourceFile.absolutePath}"
                targetFolder = "${targetDir.absolutePath}"
            }
        """)

        // Run the build
        val runner = GradleRunner.create()
                .forwardOutput()
                .withPluginClasspath()
                .withArguments("compileJava", "--info")
                .withProjectDir(projectDir)
                .withDebug(true)
        val result = runner.build()

        // Verify the gradle result
        assertTrue(result.output.contains("Task :generateRamlJavaClient")
                && result.output.contains("Starting java code generation"))
        // Verify (minimally) the plugin build result
        assertTrue(targetDir.exists() && targetDir.listFiles().isNotEmpty())
        // Ensure the java compile has run
        assertFalse(result.output.contains("Task :compileJava NO-SOURCE"))
    }
}
